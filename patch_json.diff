diff --git a/robust_server/api_routes_enhanced.py b/robust_server/api_routes_enhanced.py
--- a/robust_server/api_routes_enhanced.py
+++ b/robust_server/api_routes_enhanced.py
@@ -1,6 +1,8 @@
 from flask import Blueprint, request, jsonify
+import base64
 
 def setup_enhanced_api_routes(app, printer):
     bp = Blueprint('enhanced', __name__)
@@
     # ... (deine bestehenden multipart/form-data Routen bleiben unverändert)
@@
+    @bp.route('/api/preview-image-json', methods=['POST'])
+    def api_preview_image_json():
+        """
+        Nimmt JSON { image_base64, fit_to_label?, maintain_aspect?, enable_dither?, 
+                      dither_threshold?, dither_strength?, scaling_mode? } entgegen
+        und liefert eine Vorschau analog zur multipart-Route zurück.
+        """
+        try:
+            data = request.get_json(silent=True) or {}
+            b64 = (data.get('image_base64') or '').split(',', 1)[-1].strip()
+            if not b64:
+                return jsonify({'success': False, 'error': 'Kein Bild (image_base64)'}), 400
+            img_bytes = base64.b64decode(b64 + '===')
+
+            fit_to_label     = bool(data.get('fit_to_label', True))
+            maintain_aspect  = bool(data.get('maintain_aspect', True))
+            enable_dither    = data.get('enable_dither', True)
+            dither_threshold = int(data.get('dither_threshold', 128))
+            dither_strength  = float(data.get('dither_strength', 1.0))
+            scaling_mode     = data.get('scaling_mode', 'fit_aspect')
+
+            result = printer.process_image_for_preview(
+                img_bytes, fit_to_label, maintain_aspect, enable_dither,
+                dither_threshold=dither_threshold, dither_strength=dither_strength,
+                scaling_mode=scaling_mode
+            )
+            if not result:
+                return jsonify({'success': False, 'error': 'Bildverarbeitung fehlgeschlagen'}), 500
+
+            return jsonify({
+                'success': True,
+                'preview_base64': result.preview_base64,
+                'meta': result.meta
+            })
+        except Exception as e:
+            return jsonify({'success': False, 'error': str(e)}), 500
+
+    @bp.route('/api/print-image-json', methods=['POST'])
+    def api_print_image_json():
+        """
+        Nimmt JSON { image_base64, immediate?, fit_to_label?, maintain_aspect?, enable_dither?, 
+                     dither_threshold?, dither_strength?, scaling_mode? } entgegen
+        und druckt das Bild wie die multipart-Route.
+        """
+        try:
+            data = request.get_json(silent=True) or {}
+            b64 = (data.get('image_base64') or '').split(',', 1)[-1].strip()
+            if not b64:
+                return jsonify({'success': False, 'error': 'Kein Bild (image_base64)'}), 400
+            img_bytes = base64.b64decode(b64 + '===')
+
+            immediate        = str(data.get('immediate', 'true')).lower() == 'true'
+            fit_to_label     = bool(data.get('fit_to_label', True))
+            maintain_aspect  = bool(data.get('maintain_aspect', True))
+            enable_dither    = data.get('enable_dither', True)
+            dither_threshold = int(data.get('dither_threshold', 128))
+            dither_strength  = float(data.get('dither_strength', 1.0))
+            scaling_mode     = data.get('scaling_mode', 'fit_aspect')
+
+            if immediate:
+                ok = printer.print_image_immediate(
+                    img_bytes, fit_to_label, maintain_aspect,
+                    dither_threshold=dither_threshold, dither_strength=dither_strength,
+                    scaling_mode=scaling_mode
+                )
+                return jsonify({'success': ok})
+            else:
+                job_id = printer.print_image_with_preview(
+                    img_bytes, fit_to_label, maintain_aspect, enable_dither,
+                    dither_threshold=dither_threshold, dither_strength=dither_strength,
+                    scaling_mode=scaling_mode
+                )
+                return jsonify({'success': bool(job_id), 'job_id': job_id})
+        except Exception as e:
+            return jsonify({'success': False, 'error': str(e)}), 500
+
+    app.register_blueprint(bp)
