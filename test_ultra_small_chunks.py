#!/usr/bin/env python3
"""
Ultra Small Chunk Test
Testet die ultra-kleinen 64-Byte Chunks f√ºr kontinuierliche Zeichen-Sequenzen
"""

import requests
import time

BASE_URL = "http://localhost:8080"

def test_problematic_sequences():
    """Testet die spezifisch problematischen Sequenzen"""
    print("üéØ ULTRA SMALL CHUNK TEST")
    print("=" * 60)
    print("üì¶ Testet 64-Byte Chunks f√ºr kontinuierliche Zeichen-Sequenzen")
    print("üéØ Fokus auf: A-Z, Dashes, lange Zeichen-Ketten")
    print("=" * 60)
    
    # Die spezifisch problematischen Sequenzen
    problematic_tests = [
        {
            'name': 'Alphabet Full A-Z',
            'text': '''ALPHABET FULL TEST

ABCDEFGHIJKLMNOPQRSTUVWXYZ

Position: Korrekt?''',
            'description': 'War problematisch - Test 3 aus vorherigem Test'
        },
        {
            'name': 'Extended Alphabet',
            'text': '''EXTENDED ALPHABET TEST

ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789

Position: Korrekt?''',
            'description': 'War problematisch - Test 4 aus vorherigem Test'
        },
        {
            'name': 'Dashes Pattern',
            'text': '''DASHES PATTERN TEST

- - - - - - - - - - - - - - - -

Position: Korrekt?''',
            'description': 'War problematisch - Erste Zeile mit Fehlern'
        },
        {
            'name': 'Multiple Dense Lines',
            'text': '''MULTIPLE DENSE LINES

ABCDEFGHIJKLMNOPQRSTUVWXYZ
1234567890123456789012345
- - - - - - - - - - - - - - -
AAAAAAAAAAAAAAAAAAAAAAAAA

Alle korrekt positioniert?''',
            'description': 'Kombiniert alle problematischen Elemente'
        }
    ]
    
    for i, test in enumerate(problematic_tests, 1):
        print(f"\n{i}Ô∏è‚É£ {test['name'].upper()}")
        print(f"   üìã {test['description']}")
        
        try:
            response = requests.post(f"{BASE_URL}/api/print-text", data={
                'text': test['text'],
                'font_size': '16',
                'alignment': 'left',
                'immediate': 'true'
            })
            result = response.json()
            
            if result['success']:
                print(f"   ‚úÖ {test['name']} erfolgreich gedruckt")
                print("   üìã KRITISCH: Pr√ºfe Position - war vorher problematisch!")
                
                if 'A-Z' in test['name'] or 'Alphabet' in test['name']:
                    print("   üî§ Spezial-Check: Ist A-Z vollst√§ndig und korrekt positioniert?")
                elif 'Dashes' in test['name']:
                    print("   ‚ûñ Spezial-Check: Sind die Striche in der ersten Zeile korrekt?")
                elif 'Multiple' in test['name']:
                    print("   üìè Spezial-Check: Sind ALLE 4 dichten Zeilen gleich positioniert?")
                    
            else:
                print(f"   ‚ùå {test['name']} fehlgeschlagen: {result['error']}")
                
            # L√§ngere Pause zwischen kritischen Tests
            if i < len(problematic_tests):
                print(f"   ‚è±Ô∏è Stabilisierungs-Pause vor n√§chstem Test...")
                time.sleep(4.0)  # Noch l√§ngere Pause
                
        except Exception as e:
            print(f"   ‚ùå {test['name']} Fehler: {e}")

def test_chunk_size_effectiveness():
    """Testet die Effektivit√§t der 64-Byte Chunks"""
    print("\nüì¶ CHUNK-GR√ñSSEN-EFFEKTIVIT√ÑTS-TEST")
    print("=" * 50)
    print("   Vergleicht die Verbesserung durch ultra-kleine Chunks")
    
    # Baseline-Test (sollte funktionieren)
    print("\n   üîπ Baseline (kurze Zeile, sollte immer funktionieren):")
    test_baseline()
    
    # Stress-Test (die kritischste Sequenz)
    print("\n   üî∏ Stress-Test (l√§ngste kritische Sequenz):")
    test_stress_sequence()

def test_baseline():
    """Baseline-Test mit kurzer, unkritischer Sequenz"""
    try:
        response = requests.post(f"{BASE_URL}/api/print-text", data={
            'text': 'BASELINE: ABC DEF GHI\nShort and safe',
            'font_size': '16',
            'alignment': 'left',
            'immediate': 'true'
        })
        result = response.json()
        
        status = "‚úÖ" if result['success'] else "‚ùå"
        print(f"      {status} Baseline-Test (sollte immer funktionieren)")
        
    except Exception as e:
        print(f"      ‚ùå Baseline-Fehler: {e}")

def test_stress_sequence():
    """Stress-Test mit der l√§ngsten kritischen Sequenz"""
    try:
        stress_text = '''ULTRA-STRESS-TEST

ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ
----------------------------------------------------------------
‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†

Ultra-kleine 64-Byte Chunks aktiv'''

        response = requests.post(f"{BASE_URL}/api/print-text", data={
            'text': stress_text,
            'font_size': '14',
            'alignment': 'left',
            'immediate': 'true'
        })
        result = response.json()
        
        status = "‚úÖ" if result['success'] else "‚ùå"
        print(f"      {status} Ultra-Stress-Test")
        
        if result['success']:
            print("      üéâ ULTRA-KRITISCH: L√§ngste Sequenz erfolgreich!")
            print("      üìã Wenn das funktioniert, sind alle Probleme gel√∂st!")
        else:
            print(f"      üí¨ Stress-Fehler: {result['error']}")
            print("      ‚ö†Ô∏è Braucht eventuell noch kleinere Chunks")
            
    except Exception as e:
        print(f"      ‚ùå Stress-Test Fehler: {e}")

def analyze_ultra_small_results():
    """Analysiert die Ultra-Small-Chunk-Ergebnisse"""
    print("\n" + "="*60)
    print("üìä ULTRA-SMALL-CHUNK ERGEBNIS-ANALYSE")
    print()
    print("üîç Vergleiche mit vorherigen Ergebnissen:")
    print("   VORHER (128-Byte Chunks):")
    print("   ‚ùå Alphabet-Test 3 & 4: Fehler")
    print("   ‚ùå Pattern Dashes: Fehler in erster Zeile")
    print()
    print("   NACHHER (64-Byte Chunks):")
    print("   ‚ùì Alphabet Full A-Z: ?")
    print("   ‚ùì Extended Alphabet: ?")
    print("   ‚ùì Dashes Pattern: ?")
    print("   ‚ùì Multiple Dense Lines: ?")
    print()
    
    answer = input("‚ùì Sind ALLE problematischen Tests jetzt erfolgreich? (y/n): ").lower().strip()
    
    if answer == 'y':
        print("\nüéâ ULTRA-SMALL-CHUNKS ERFOLGREICH!")
        print("‚úÖ 64-Byte Chunks l√∂sen das kontinuierliche Sequenz-Problem!")
        print("üîß Ultra-kleine Chunks + 10 Retries + l√§ngere Pausen = Perfekt!")
        print()
        print("üìã Gel√∂ste Probleme:")
        print("   ‚úÖ A-Z Alphabet-Zeilen")
        print("   ‚úÖ Dash-Pattern in erster Zeile")
        print("   ‚úÖ Lange Zeichen-Sequenzen")
        print("   ‚úÖ Dense horizontale Bereiche")
        
    elif answer == 'n':
        print("\n‚ö†Ô∏è WEITERE OPTIMIERUNG N√ñTIG")
        print("üîß Noch kleinere Chunks erforderlich")
        suggest_even_smaller_chunks()
        
    else:
        print("\n‚ö†Ô∏è Unklare Bewertung - visueller Check empfohlen")

def suggest_even_smaller_chunks():
    """Vorschl√§ge f√ºr noch kleinere Chunks"""
    print("\nüõ†Ô∏è NOCH-KLEINERE-CHUNKS-VORSCHL√ÑGE:")
    print("1. Chunk-Gr√∂√üe auf 32 Bytes reduzieren")
    print("2. Chunk-Gr√∂√üe auf 16 Bytes (extrem konservativ)")
    print("3. Adaptive Chunk-Gr√∂√üe: 32 Bytes f√ºr dichte, 64 f√ºr normale Bereiche")
    print("4. Noch l√§ngere Pausen: 0.1s zwischen Chunks")
    print("5. Hardware-Reset zwischen kritischen Drucken")

def quick_verification():
    """Schnelle Verifikation der kritischsten Sequenz"""
    print("\n‚ö° SCHNELLE VERIFIKATION")
    print("   Teste nur die kritischste A-Z Sequenz...")
    
    try:
        response = requests.post(f"{BASE_URL}/api/print-text", data={
            'text': 'VERIFIKATION\n\nABCDEFGHIJKLMNOPQRSTUVWXYZ\n\n64-Byte Chunks',
            'font_size': '16',
            'alignment': 'left',
            'immediate': 'true'
        })
        result = response.json()
        
        if result['success']:
            print("   ‚úÖ A-Z Verifikation erfolgreich")
            print("   üìã Das war die kritischste Sequenz!")
        else:
            print(f"   ‚ùå A-Z Verifikation fehlgeschlagen: {result['error']}")
            
    except Exception as e:
        print(f"   ‚ùå Verifikations-Fehler: {e}")

if __name__ == "__main__":
    print("üì¶ ULTRA SMALL CHUNK TESTER")
    print("üéØ Testet 64-Byte Chunks f√ºr kontinuierliche Zeichen-Sequenzen")
    print()
    
    test_problematic_sequences()
    test_chunk_size_effectiveness()
    analyze_ultra_small_results()
    
    # Optional: Schnelle Verifikation
    answer = input("\n‚ùì Schnelle A-Z Verifikation? (y/N): ")
    if answer.lower() == 'y':
        quick_verification()
    
    print("\nüéâ Ultra Small Chunk Test abgeschlossen!")
    print("üì¶ 64-Byte Chunks sollten alle kontinuierlichen Sequenz-Probleme l√∂sen.")
